' Gambas class file

Public modo As Integer 'modo añadir=-1, editar=nº de id
Public anadir As Integer = -1
Public reg As New ClassRegistroAlumno

Public Sub Form_Open()
  
  ' Dim d As Lat
  Dim a As Integer
  Dim diploma As String
  
  'carga los distintos tipos de diplomas tematicos que haya....
  For a = 0 To ModuleGestionDiploma.lista.Registros.count - 1
    diploma = ModuleGestionDiploma.lista.Registros[a].Id & " | " & ModuleGestionDiploma.lista.Registros[a].NombrePlantilla
    ComboBoxDiplomaTematico.Add(diploma)  
  Next
  
  If modo > -1 Then 
    If reg.FotoAlumno <> "" Then 
      PictureBoxFoto05.Tag = reg.FotoAlumno
      PictureBoxFoto05.Picture = Picture[ModulePrincipal.rutaprograma & "temporales/FotosRegistros/" & reg.FotoAlumno]
    Endif
    
    If reg.Foto07 <> "" Then
      PictureBoxFoto06.Tag = reg.Foto07
      PictureBoxFoto06.Picture = Picture[ModulePrincipal.rutaprograma & "temporales/FotosRegistros/" & reg.Foto07]
    Endif
    
    TextBoxAlumno.text = reg.NombreAlumno
    TextBoxTutor.text = reg.NombreTutor
    TextBoxColegio.text = reg.Colegio
    TextBoxCiudad.text = reg.Ciudad
    ComboBoxTag.text = reg.tag
    ComboBoxTag.Add(reg.tag)
    DateBoxFecha.value = Val(reg.Fecha)
    
    ''TODO: valores del combo editado
    ComboBoxDiplomaTematico.Text = Str$(reg.IdDiplomaTematico) & " | " & ModuleGestionDiploma.lista.Registros[ModuleGestionDiploma.lista.buscar(reg.IdDiplomaTematico)].nombreplantilla
    
  Endif
  
  ComboBoxTag.Add("")  'vacio por si quiere meter un texto cualquiera...
  ComboBoxTag.Add("EAN13:")
  ComboBoxTag.Add("QR:")
   ComboBoxDiplomaTematico_Click()
  Me.Center
  
End

Public Sub ToolButtonCancelarDiploma2_Click()
  
  Me.close
  
End

Public Sub ToolButtonAceptarDiploma_Click()
  
  reg.IdDiplomaTematico = Val(Left(ComboBoxDiplomaTematico.text, InStr(ComboBoxDiplomaTematico.text, "|") - 1)) 'extraigo el IdDiploma (no el indice del registro de diplomas)
  reg.NombreAlumno = TextBoxAlumno.Text
  reg.NombreTutor = TextBoxTutor.Text
  reg.Colegio = TextBoxColegio.Text
  reg.Ciudad = TextBoxCiudad.text
  reg.Fecha = Str$(DateBoxFecha.Value)
  reg.FotoAlumno = PictureBoxFoto05.Tag
  reg.Foto07 = PictureBoxFoto06.Tag
  reg.tag = ComboBoxTag.Text
  
  If modo = anadir Then
    ModuleGestionAlumno.anadirRegistro(reg)
  Else
    'editando...
    ModuleGestionAlumno.EditarRegistro(reg, modo)
    
  Endif
  Me.Close
  
End

Private Function extraeIdDiploma(texto As String) As Integer
  
  Dim cadena As String[]
  Dim NumeroRegistro As Integer
  
  cadena = Split(texto, "|")
  NumeroRegistro = ModuleGestionDiploma.lista.buscar(Val(cadena[0])) 'devuelve el indice del registro (no su IDdiploma) !!!
  
  Return NumeroRegistro
  
End

Public Sub PictureBoxFoto05_MouseDown()
  
  reg.FotoAlumno = asignaImagen(PictureBoxFoto05)
  PictureBoxFoto05.tag = reg.FotoAlumno
  
End

Public Sub PictureBoxFoto06_MouseDown()
  
  reg.Foto07 = asignaImagen(PictureBoxFoto06)
  PictureBoxFoto06.tag = reg.Foto07
  
End

Private Sub asignaImagen(PictureBoxElegido As Picturebox) As String
  
  Dim dialogofile As New FormElegirFichero
  Dim dat As New ClassDato
  
  dialogofile.valor = dat
  
  dialogofile.Titulo = ("Elija el archivo gráfico")
  dialogofile.Filtro = ["*.png;*.jpg;*.jpeg;*.bmp", ("Ficheros de Imágenes")]
  dialogofile.ShowModal()
  
  If dat.dato = "-1" Then Return
  
  Return asignaImagen2Paso(dat.dato, PictureBoxElegido)
  
End

Public Sub ToolButton1_Click()
  
  Dim numero As Integer
  
  numero = Val(Last.tag)
  
  Select numero
    Case 1
      reg.FotoAlumno = ModuleHacerTransparente.convertirTransparente(ModulePrincipal.RutaPrograma & "temporales/FotosRegistros/" & reg.FotoAlumno)
      PictureBoxFoto05.Picture = Picture[ModulePrincipal.rutaprograma & "temporales/FotosRegistros/" & reg.FotoAlumno]
      PictureBoxFoto05.tag = reg.FotoAlumno
    Case 2
      reg.Foto07 = ModuleHacerTransparente.convertirTransparente(ModulePrincipal.RutaPrograma & "temporales/FotosRegistros/" & reg.Foto07)
      PictureBoxFoto06.Picture = Picture[ModulePrincipal.rutaprograma & "temporales/FotosRegistros/" & reg.Foto07]
      PictureBoxFoto06.tag = reg.Foto07
  End Select
  
End

Public Sub ButtonIgualTutor_Click()
  
  If ModuleGestionAlumno.Lista.Registros.max = -1 Then 
    Message.Info(("Se trata del primer datos que introduces, no puede igualarlo al anterior"))
    Return
  Endif
  If modo = 0 Then Return
  If modo = -1 Then 
    reg.NombreTutor = ModuleGestionAlumno.Lista.Registros[ModuleGestionAlumno.Lista.Registros.max].NombreTutor
    TextBoxTutor.text = reg.NombreTutor
  Else
    reg.NombreTutor = ModuleGestionAlumno.Lista.Registros[modo - 1].NombreTutor
    TextBoxTutor.text = reg.NombreTutor
    
  Endif
  
End

Public Sub ButtonIgualColegio_Click()
  
  If ModuleGestionAlumno.Lista.Registros.max = -1 Then 
    Message.Info(("Se trata del primer datos que introduces, no puede igualarlo al anterior"))
    Return
  Endif 
  If modo = 0 Then Return
  If modo = -1 Then 
    reg.Colegio = ModuleGestionAlumno.Lista.Registros[ModuleGestionAlumno.Lista.Registros.max].Colegio
    TextBoxColegio.text = reg.Colegio
  Else
    reg.Colegio = ModuleGestionAlumno.Lista.Registros[modo - 1].Colegio
    TextBoxColegio.text = reg.Colegio
    
  Endif
  
End

Public Sub ButtonIgualCiudad_Click()
  
  If ModuleGestionAlumno.Lista.Registros.max = -1 Then 
    Message.Info(("Se trata del primer datos que introduces, no puede igualarlo al anterior"))
    Return
  Endif
  If modo = 0 Then Return
  If modo = -1 Then 
    reg.Ciudad = ModuleGestionAlumno.Lista.Registros[ModuleGestionAlumno.Lista.Registros.max].Ciudad
    TextBoxCiudad.text = reg.Ciudad
  Else
    reg.Ciudad = ModuleGestionAlumno.Lista.Registros[modo - 1].Ciudad
    TextBoxCiudad.text = reg.Ciudad
    
  Endif
  
End

Public Sub ButtonIgualNombre_Click()
  
  If ModuleGestionAlumno.Lista.Registros.max = -1 Then 
    Message.Info(("Se trata del primer datos que introduces, no puede igualarlo al anterior"))
    Return
  Endif
  If modo = 0 Then Return
  If modo = -1 Then 
    reg.NombreAlumno = ModuleGestionAlumno.Lista.Registros[ModuleGestionAlumno.Lista.Registros.max].NombreAlumno
    TextBoxAlumno.text = reg.NombreAlumno
  Else
    reg.NombreAlumno = ModuleGestionAlumno.Lista.Registros[modo - 1].NombreAlumno
    TextBoxAlumno.text = reg.NombreAlumno
    
  Endif
  
End

Public Sub ButtonIgualFecha_Click()
  
  If ModuleGestionAlumno.Lista.Registros.max = -1 Then 
    Message.Info(("Se trata del primer datos que introduces, no puede igualarlo al anterior"))
    Return
  Endif
  If modo = 0 Then Return
  If modo = -1 Then 
    reg.Fecha = ModuleGestionAlumno.Lista.Registros[ModuleGestionAlumno.Lista.Registros.max].fecha
    
  Else
    reg.fecha = ModuleGestionAlumno.Lista.Registros[modo - 1].fecha
  Endif
  DateBoxFecha.value = Val(reg.Fecha)    
  
End

Public Sub ButtonIgualOtro_Click()
  
  If ModuleGestionAlumno.Lista.Registros.max = -1 Then 
    Message.Info(("Se trata del primer datos que introduces, no puede igualarlo al anterior"))
    Return
  Endif
  If modo = 0 Then Return
  If modo = -1 Then 
    reg.tag = ModuleGestionAlumno.Lista.Registros[ModuleGestionAlumno.Lista.Registros.max].tag
    
  Else
    reg.tag = ModuleGestionAlumno.Lista.Registros[modo - 1].tag
  Endif
  
  ComboBoxTag.text = reg.tag
  
Catch
  ModuleMensajeError.SistemaDescripcionError()  
  
End

'--------------------------------------------------------------------------------------
'Sistema de ocultar etiquetas / botones / picturesbox, si no estan en la plantilla actual
'--------------------------------------------------------------------------------------

Public Sub sistemadeocultacion(plantillaactual As String)
  
  Dim a As Integer
  Dim contenido As String
  Dim listadeEtiquetas As String[] = ["CAMPO01", "CAMPO02", "CAMPO03", "CAMPO04", "CAMPO05", "CAMPO06", "FOTO06", "FOTO07"]
  
  'Inicialmente: poner todas las etiquetas como ocultas
  For a = 0 To listadeEtiquetas.max
    mostrarEtiquetas(a, False)
  Next
  
  'cargamos la platillas
  contenido = Upper$(file.load(plantillaactual))
  'comprobamos uno por uno los campo, si existe, activamos 
  For a = 0 To listadeEtiquetas.max
    If InStr(contenido, listadeEtiquetas[a]) <> 0 Then 
      'existe la etiqueta en la plantilla
      'mostrar label/textbox/picturebox        
      mostrarEtiquetas(a, True)
    Endif
  Next
Catch
  ModuleMensajeError.SistemaDescripcionError()
  
End

'----------------------------------------------
'mostrarEtiquetas(a As Integer)
'----------------------------------------------

Public Sub mostrarEtiquetas(a As Integer, mostrar As Boolean)
  'el parametro "a" indica que grupo se va a modificar la vision
  'el parametro "mostrar", es del tipo boolean, y asignara el valor true o false a las propiedades del mostrar.
  
  Select Case a
    Case 0  
      TextBoxAlumno.visible = mostrar
      ButtonIgualNombre.visible = mostrar
    Case 1
      TextBoxTutor.visible = mostrar
      ButtonIgualTutor.visible = mostrar
    Case 2
      TextBoxColegio.visible = mostrar
      ButtonIgualColegio.visible = mostrar
      
    Case 3
      TextBoxCiudad.visible = mostrar
      ButtonIgualCiudad.visible = mostrar
    Case 4
      DateBoxFecha.visible = mostrar
      ButtonIgualFecha.Visible = mostrar
    Case 5
      ComboBoxTag.visible = mostrar
      ButtonIgualOtro.visible = mostrar
    Case 6
      PictureBoxFoto05.visible = mostrar
      ToolButton2.Visible = mostrar
    Case 7
      PictureBoxFoto06.visible = mostrar
      ToolButton1.visible = mostrar
  End Select
Catch
  ModuleMensajeError.SistemaDescripcionError()
  
End

Public Sub ComboBoxDiplomaTematico_Click()
  
  Dim valor As Integer
  
  valor = extraeIdDiploma(ComboBoxDiplomaTematico.text)
  
  sistemadeocultacion(ModulePrincipal.rutaprograma & "PlantillasBases/" & ModuleGestionDiploma.lista.Registros[valor].PlantillaBase)
  
End

'----------------------------------------------------------
' Soltar imagenes
'----------------------------------------------------------

Public Sub PictureBoxFoto05_Drop()
  
  reg.FotoAlumno = suelta(PictureBoxFoto05)
  PictureBoxFoto05.tag = reg.FotoAlumno
  
End

Public Sub PictureBoxFoto06_Drop()
  
  reg.Foto07 = suelta(PictureBoxFoto06)
  PictureBoxFoto06.tag = reg.Foto07
  
End

Public Sub suelta(cajapicture As PictureBox) As String
  
  Dim nombre As String
  Dim a As String
  Dim b As String[]
  
  a = Drag.data ' limitamos el tipo de los datos pegados
  b = Split(a, gb.CrLf, "", True) ' cargamos la lista de rutas en un array b
  ' escapando las terminaciones de línea
  b[0] = Replace(b[0], "\x00", "")
  If Left(b[0], 7) = "file://" Then 
    a = Null  ' reutilizamos la variable "a"
    
    a = Right$(b[0], -7) ' quitamos "file://"
    a = URLDecode(a)  ' descodificamos las cadenas
    
    'fichero de ruta...
    Return asignaImagen2Paso(a, cajapicture)
    
  Else
    'comprobar si proviene de navegador http 
    a = Replace(a, "\x00", "")
    If InStr(a, "www.google") <> 0 Then 
      a = comun.Between(a, "imgurl=", "&")  
      a = URLDecode(a)  ' descodificamos las cadenas
      nombre = "/tmp/1." & Right$(a, 3)
      Exec ["wget", a, "-O", nombre] Wait
      'fichero de ruta...
      Return asignaImagen2Paso(nombre, cajapicture)
      
    Endif
  Endif
  
End

Static Private Function URLDecode(txt As String) As String
  ''' Descodifica los caracteres hexadecimales en las URI's recorriendo la cadena dada
  ''' Params: txt la URI a descodificar
  ''' Return: la URI descodificada
  
  Dim txt_len As Integer
  Dim i As Integer
  Dim ch As String
  Dim digits As String
  Dim resultado As String
  
  resultado = ""
  txt_len = Len(txt)
  i = 1
  Do While i <= txt_len
    ' Examinar el siguiente caracter
    ch = Mid$(txt, i, 1)
    If ch = "+" Then
      ' Convertir a espacio
      resultado = resultado & " "
    Else If ch <> "%" Then
      ' Normal, no cambiar
      resultado = resultado & ch
    Else If i > txt_len - 2 Then
      resultado = resultado & ch
    Else
      ' Obtener los siguientes caracteres hex.
      digits = Mid$(txt, i + 1, 2)
      ' Debug digits
      ' aquí convertimos el valor hexadecimal a entero y
      ' se lo pasamos a Chr que devuelve el carácter correcto.
      resultado = resultado & Chr$(CInt(Val("&" & digits)))
      i = i + 2
    Endif
    i = i + 1
  Loop
  
  Return resultado
  
End

Public Function asignaImagen2Paso(ruta As String, PictureBoxElegido As Picturebox) As String
  
  Dim nombrecopia As String
  Dim extension As String
  Dim comparacion As String 'añadido para comprobar si existe un fichero con el mismo nombre y es igual
  Dim copiar As String
  Dim comando As String
  Dim nombresimple As String
  
  If Not Exist(ruta) Then
    Message.Info(("No se ha podido descargarse el archivo")) 
    Return 
  Endif
  
  PictureBoxElegido.Picture = Picture["importar.png"]
  Wait 0.1
  PictureBoxElegido.Picture = Picture[ruta]
  PictureBoxElegido.tag = ruta
  copiar = "si"
  
  nombresimple = ModuleUtilidadesDisco.VerificarNombreEtiqueta(Replace(ModuleUtilidadesDisco.extraedesdebarra(PictureBoxElegido.tag), " ", "_"), ["FOTO", "PLANTILLA", "CAMPO"], ["Imagen", "PLA_TILLA", "CA_PO"])
  nombrecopia = ModulePrincipal.RutaPrograma & "temporales/FotosRegistros/" & nombresimple
  
  While (Exist(nombrecopia))
    'si existe fichero con el mismo nombre, 1º comprobar si es igual...
    comando = "cmp " & nombrecopia & " " & PictureBoxElegido.tag
    Shell comando To comparacion
    If comparacion = "" Then 
      'son iguales-> no hace falta cambiar de nombre ya que lo tengo...
      'no hago la copia
      copiar = "no"
      
      Break
    Endif
    
    'para que no machaque nombres de fichros...
    extension = ModuleUtilidadesDisco.extraeExtension(nombrecopia)
    If extension <> "" Then 
      nombrecopia = Mid$(nombrecopia, 1, Len(nombrecopia) - Len(extension) - 1) & "c" & "." & extension
      copiar = "si"
    Else
      nombrecopia = Mid$(nombrecopia, 1, Len(nombrecopia) - Len(extension)) & "c" 
      copiar = "si"
    Endif
    
  Wend
  
  If copiar = "si" Then 
    
    Exec ["cp", PictureBoxElegido.tag, nombrecopia] Wait
    PictureBoxElegido.Picture = Picture["importar.png"]
    Wait 0.1
    PictureBoxElegido.Picture = Picture[nombrecopia]
    PictureBoxElegido.tag = nombrecopia
    
  Endif
  
  Return ModuleUtilidadesDisco.extraedesdebarra(nombrecopia)
  
End

Public Sub botontransparente_Click()
  'reg.FotoAlumno = PictureBoxFoto05.Tag
  'reg.Foto07 = PictureBoxFoto06.Tag
  
  Dim numero As Integer
  
  numero = Val(Last.tag)
  
  Select numero
    Case 1
      reg.FotoAlumno = ModuleHacerTransparente.convertirTransparente(ModulePrincipal.RutaPrograma & "temporales/FotosRegistros/" & reg.FotoAlumno)
      PictureBoxFoto05.Picture = Picture[ModulePrincipal.rutaprograma & "temporales/FotosRegistros/" & reg.FotoAlumno]
      PictureBoxFoto05.tag = reg.FotoAlumno
    Case 2
      reg.Foto07 = ModuleHacerTransparente.convertirTransparente(ModulePrincipal.RutaPrograma & "temporales/FotosRegistros/" & reg.Foto07)
      PictureBoxFoto06.Picture = Picture[ModulePrincipal.rutaprograma & "temporales/FotosRegistros/" & reg.Foto07]
      PictureBoxFoto06.tag = reg.Foto07
  End Select
  
End
